// @file version.cpp

/*    Copyright 2009 10gen Inc.
 *
 *    This program is free software: you can redistribute it and/or  modify
 *    it under the terms of the GNU Affero General Public License, version 3,
 *    as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the GNU Affero General Public License in all respects
 *    for all of the code used other than as permitted herein. If you modify
 *    file(s) with this exception, you may extend this exception to your
 *    version of the file(s), but you are not obligated to do so. If you do not
 *    wish to do so, delete this exception statement from your version. If you
 *    delete this exception statement from all source files in the program,
 *    then also delete it in the license file.
 */

#define MONGO_LOG_DEFAULT_COMPONENT ::mongo::logger::LogComponent::kControl

#include "mongo/platform/basic.h"

#include <initializer_list>
#include <boost/version.hpp>
#include <sstream>
#include <string>

#include "mongo/base/parse_number.h"
#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/config.h"
#include "mongo/db/jsobj.h"
#include "mongo/util/debug_util.h"
#include "mongo/util/log.h"
#include "mongo/util/mongoutils/str.h"
#include "mongo/util/version.h"

#ifdef MONGO_CONFIG_SSL
#include <openssl/crypto.h>
#endif

namespace mongo {

    using std::string;
    using std::stringstream;

    const char versionString[] = "@mongo_code_version@";
    const char * gitVersion() { return "@buildinfo_git_version@"; }
    const char * compiledJSEngine() { return "@buildinfo_js_engine@"; }
    const char * allocator() { return "@buildinfo_allocator@"; }

    std::vector<std::string> compiledModules() {
        const std::vector<string> modules_list = @buildinfo_modules@;
        return modules_list;
    }

    // See unit test for example outputs
    BSONArray toVersionArray(const char* version){

        /* Approved formats for version:
         *      1.2.3
         *      1.2.3-pre-
         *      1.2.3-rc4 (rc0 up to rc49)
         *      1.2.3-rc4-pre-
         */

        // this is inefficient, but cached so it doesn't matter
        BSONArrayBuilder b;
        string curPart;
        const char* c = version;
        int finalPart = 0; // 0 = final release, -100 = pre, -50 to -1 = -50 + X for rcX
        do { //walks versionString including NUL byte
            if (!(*c == '.' || *c == '-' || *c == '\0')){
                curPart += *c;
                continue;
            }

            int num;
            if ( parseNumberFromString( curPart, &num ).isOK() ) {
                b.append(num);
            }
            else if (curPart.empty()){
                verify(*c == '\0');
                break;
            }
            else if (str::startsWith(curPart, "rc")){
                int rc;
                invariantOK(parseNumberFromString( curPart.substr(2), &rc ));
                invariant(rc >= 0);
                invariant(rc < 50); // Need to adjust calculation if we pass this.
                finalPart = -50 + rc;
                break;
            }
            else if (curPart == "pre"){
                finalPart = -100;
                break;
            }

            curPart = "";
        } while (*c++);

        b.append(finalPart);
        return b.arr();
    }

    bool isSameMajorVersion( const char* version ) {

        BSONArray remoteVersionArray = toVersionArray( version );

        BSONObjIterator remoteIt(remoteVersionArray);
        BSONObjIterator myIt(versionArray);

        // Compare only the first two fields of the version
        int compareLen = 2;
        while (compareLen > 0 && remoteIt.more() && myIt.more()) {
            if (remoteIt.next().numberInt() != myIt.next().numberInt()) break;
            compareLen--;
        }

        return compareLen == 0;
    }

    const BSONArray versionArray = toVersionArray(versionString);

    string mongodVersion() {
        stringstream ss;
        ss << "db version v" << versionString;
        return ss.str();
    }

    void printGitVersion() { log() << "git version: " << gitVersion(); }

    const std::string openSSLVersion(const std::string &prefix, const std::string &suffix) {
#ifndef MONGO_CONFIG_SSL
        return "";
#else
        return prefix + SSLeay_version(SSLEAY_VERSION) + suffix;
#endif
    }

    void printOpenSSLVersion() {
#ifdef MONGO_CONFIG_SSL
        log() << openSSLVersion("OpenSSL version: ");
#endif
    }

#if defined(_WIN32)
    const char * targetMinOS() {
#if (NTDDI_VERSION >= NTDDI_WIN7)
        return "Windows 7/Windows Server 2008 R2";
#elif (NTDDI_VERSION >= NTDDI_VISTA)
        return "Windows Vista/Windows Server 2008";
#else
#error This targeted Windows version is not supported
#endif // NTDDI_VERSION
    }

    void printTargetMinOS() {
        log() << "targetMinOS: " << targetMinOS();
    }
#endif // _WIN32

    void printAllocator() {
        log() << "allocator: " << allocator();
    }

    void appendBuildInfo(BSONObjBuilder& result) {
        result << "version" << versionString
               << "gitVersion" << gitVersion()
#if defined(_WIN32)
               << "targetMinOS" << targetMinOS()
#endif
               << "allocator" << allocator()
               << "versionArray" << versionArray
               << "javascriptEngine" << compiledJSEngine();

        BSONObjBuilder opensslInfo(result.subobjStart("openssl"));
#ifdef MONGO_CONFIG_SSL
        opensslInfo << "running" << openSSLVersion()
                    << "compiled" << OPENSSL_VERSION_TEXT;
#else
        opensslInfo << "running" << "disabled"
                    << "compiled" << "disabled";
#endif
        opensslInfo.done();

        BSONObjBuilder buildvarsInfo(result.subobjStart("buildEnvironment"));
        buildvarsInfo << "cc" << "@buildinfo_cc_version@"
                      << "ccflags" << "@buildinfo_ccflags@"
                      << "cflags" << "@buildinfo_cflags@"
                      << "cxx" << "@buildinfo_cxx_version@"
                      << "cxxflags" << "@buildinfo_cxxflags@"
                      << "linkflags" << "@buildinfo_linkflags@"
                      << "modules" << compiledModules()
                      << "target_arch" << "@buildinfo_target_arch@"
                      << "target_os" << "@buildinfo_target_os@";
        buildvarsInfo.done();

        result << "bits" << (int)sizeof(void*) * 8;
        result.appendBool( "debug" , kDebugBuild );
        result.appendNumber("maxBsonObjectSize", BSONObjMaxUserSize);
    }
}
